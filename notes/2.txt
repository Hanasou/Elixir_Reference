Pattern Matching
- Elixir's replacement for variable assignment
- Pattern matching is essentially used any time there's an equal sign
- In Elixir, traditional indexing doesn't work. If you want to access an element by index, you have to use Enum.at, or enum.fetch.
- Otherwise, you'd have to pattern match. Here are some examples.

- Plain assignment is the most basic form of pattern matching
iex(1)> deck = Cards.create_deck
["Ace of Clubs", "One of Clubs", "Two of Clubs", "Ace of Diamonds",
 "One of Diamonds", "Two of Diamonds", "Ace of Hearts", "One of Hearts",
 "Two of Hearts", "Ace of Spades", "One of Spades", "Two of Spades"]

 - You can assign elements of a tuple by "matching" it to another tuple for other variables
 - In this example, deal(deck, 5) will return a tuple containing a hand of 5, and the rest of the deck.
 - On the left, we assign another tuple to it, which will match the pattern that our function returned.
 - Therefore, we assigned the two different values to two different variables
iex(2)> {hand, rest_of_deck} = Cards.deal(deck, 5)
{["Ace of Clubs", "One of Clubs", "Two of Clubs", "Ace of Diamonds",
  "One of Diamonds"],
 ["Two of Diamonds", "Ace of Hearts", "One of Hearts", "Two of Hearts",
  "Ace of Spades", "One of Spades", "Two of Spades"]}
iex(3)> hand
["Ace of Clubs", "One of Clubs", "Two of Clubs", "Ace of Diamonds",
 "One of Diamonds"]
iex(4)> rest_of_deck
["Two of Diamonds", "Ace of Hearts", "One of Hearts", "Two of Hearts",
 "Ace of Spades", "One of Spades", "Two of Spades"] 

 - Another example
iex(5)> red = ["red"]
["red"]
- Another example of basic assignment. We're assigning the entire list here to the variable red.

- What if we want to assign the string "red" to the variable red from a list?
- We do it the same way we would in our tuple example
iex(6)> [red] = ["red"]
["red"]
iex(7)> red
"red"
- The right side returns a list, so if we want to assign a variable to an element of that list, we need to
match the pattern by wrapping it in a list.

- If the patterns on the left and right do not match, we get an error
ex(9)> [red, blue] = ["red"]
** (MatchError) no match of right hand side value: ["red"]
iex(9)> [red] = ["red", "blue"]
** (MatchError) no match of right hand side value: ["red", "blue"]

Atoms
- Atoms are basically like strings. They handle things like status codes. They are words followed by a colon. (:ok, :error)
- So when should you use atoms vs strings? Atoms are used when you want to codify something. A response code would be a good example.
Strings should contain direct messages, or really anything you would generally use strings for.

More Pattern Matching
- You can match literals together.
iex(21)> ["red", blue] = ["red", "blue"]
["red", "blue"]
iex(22)> blue
"blue"
- Matching literals together only works if the literals, well, match.
iex(23)> ["red", blue] = ["not red", "blue"]
** (MatchError) no match of right hand side value: ["not red", "blue"]
- So where can this be used? Well we can use a case statement to match a literal.

Dependencies
- Generating the project gave us a Mixfile (mix.exs).
- This has various things about our project. One of which is dependencies located in deps
- Deps takes in tuples of atom-version pairs. The atom signifies the name of our dependency, while the version is a string.
- install dependencies with mix deps.get

Documentation
- Kinda short. You can go ahead and look at some of the code to see how to write module level, and function level documentation.
- The one thing to note is Examples. Make sure you format it exactly
  ## Examples
      iex> Cards.hello()
      :world
- Make sure "## Examples" is on the same indentation level as your function.
- Make sure you have two pound signs, followed by a space, followed by "Examples" with a capital E.
- Make sure there's two indentations for each line that follows "## Examples" (all lines that have code in them).

Testing
- Testing is a first-class citizen in Elixir, so no need for dependencies to make good tests.
- Simply run `mix test` in your command line to run your tests.
- One interesting thing about Elixir is the "doctest".
- Essentially, if you have documentation in your code with Examples, then Elixir will look at that
section, and test that code to see if it has the correct behavior. Kinda cool.

Maps
- You know how maps work. Here's how to initialize them in Elixir.
colors = %{primary: "red", secondary = "blue"}
- We can access the values with dot notation
primary_color = colors.primary
- We can also use pattern matching
%{secondary: secondary_color} = colors
- Remember how pattern matching works. The data structures on the left and right must match. You can think of the data structures as "cancelling out"
to assign a variable directly to what's inside the data structure. The code above confirms that the structures on the left and right are both maps.
Then, it confirms that both share the same key (secondary in this case), and then it will assign the secondary_color variable to the value inside
the colors map under the secondary key.
- Remember some principles of functional programming. We can't reassign a value inside the map. We have to create an entirely new data structure and
reassign our variable to the new map we created.
- Basically keep in mind that we're going to be primarily interacting with functions to modify our data structures.
- In this case, we'll be using the Put function, which basically upserts a value.
colors = Map.put(colors, :primary, "blue")
- Notice that we're reassigning our map to this new one that the "put" function gives us. We're not mutating our currently existing map.
- Notice that we're using the atom as the key we're upserting.
- There's also some syntactical sugar we can use.
colors = %{ colors | primary: "blue" }
- Note that this syntax only works for updating an existing property. It does not insert it if it doesn't exist. If we put a key that does not exist after the pipe symbol,
then we'll get an error.
- This indicates that we're making a new map out of colors, and we're updating a key/value pair next to the pipe operator ( | ).
- There's also a put_new function that will only get triggered if the key doesn't exist in the map.

Keyword Lists
- You can kind of think of this like a list of tuples, each containing key/value pairs.
- Why would you want to do this? One example is if you need multiple "keys" that are the same, since keys have to be unique in maps.
- An example of where this would be useful would be if we're querying some data, and we need to chain some "where" clauses. Then we would pass in a Keyword
list which would have multiple "where" keys where each of them would contain a clause.
- If a keyword list is the last element in a function call, then you can omit the square brackets that usually contain them. The fact that
keyword lists get this kind of treatment sort of indicates that these are a pretty big deal.
- Also, you can omit the parantheses of a function call. I noticed functional languages like Elixir and Scala have many features that make the language look like plain English.
Just a thought.