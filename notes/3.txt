Structs
- Find the struct definition inside Identicon.Image
- We initialize a struct like this
%ModuleName{FieldName: FieldValue}

More Pattern Matching stuff for Structs
%Identicon.Image{hex: [r, g, b | _tail]} = image
- To review, what we're basically doing here is initializing seperate r, g, and b variables based on what's inside of the hex field
- | _tail means that we're basically tossing away the rest of the values in hex

def get_rgb_refactored(%Identicon.Image{hex: [r, g, b | _tail]} = image)
- We can pattern match these values as we're passing them into a function as well

Reminder of the pipe operator, the output of one function will get passed into the input for another
- So hex gets passed as the first argument into Enum.chunk_every(3)
and the output of Enum.chunk_every(3) gets passed into some_func
hex     
|> Enum.chunk_every(3) 
|> some_func()

Joining lists
- Use the ++ operator
list1 ++ list2

Function References
- So what if we want to pass functions as arguments into other functions?
Enum.map(rows, &mirror_row/1)
- Basically, we're applying our mirror_row function to every element in rows
- What's up with this syntax? Well, if we passed the literal function in there, then the function would get called.
So what we actually want to do is pass a reference to the function with '&'
The '/1' at the end indicates that there's one argument in this function.