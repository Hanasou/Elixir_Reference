Phoenix
- mix phx.new <project name> is how we generate a new phoenix project
- Oh, make sure you have Phoenix actually installed
- While inside the root directory of our Phoenix app (in this case, "discuss"), run mix ecto.create to set up the database
- In order to set that up, you need an instance of Postgres running
- Run mix phx.server to start the server

- Phoenix is a full MVC framework. It has all sorts of things that you would expect from one.
- Elixir comes with its own html templating that you'll see in the .heex files

Layout
- In the layout directory you'll see a bunch of heex files that includes the UI for the application
- root.html.heex contains the header for all our pages.
- index.html.heex under the page directory is the index for the "/" path. I'm assuming this will be the case for our other templates as well.

How does this framework really work?
- There's a lot of stuff under the hood that can't be gathered from simply looking at the code. I don't like that, but whatever.
- Phoenix looks at the names of your views, as in the files under the "views" directory.
- Notice how the name of the view modules matches up with the directories under templates. See PageView, and LayoutView and how there are corresponding
page and layout directories under templates.
- Phoenix will look at your view modules, and it will render the corresponding html templates in each corresponding directory in the templates directory.
- The html templates get rendered when the render function gets called, which happens in the corresponding controllers.
- Woah hang on a minute, render is a part of the PageView module? I guess it's invisible?
- The functions that call the render function get called in the router, when we make a request to a certain route in our application.
- Hopefully you got all that, don't worry, you've been through this kind of thing before.

DB Migrations
- Generate a migration script for the ddl we need in our database
mix ecto.gen.migration <file_name>
- To run the migration script(s)
mix ecto.migrate

Changesets
- There were a lot of things about Phoenix and MVC that I didn't take notes on here. I'm probably never going to use this framework, but it might still be nice
to see what I can pick up from listening to this.
- Something to note is that in the course, there is a model interface you can use when defining models. That doesn't seem to exist in this version.
- Changeset is a part of ecto. Changeset refers to both a function and struct returned by said function.
- The function takes in a struct and some params. The struct is a model that you're interesting in changing, and the params are what you want to change.
- The Changeset struct (what's getting returned by the changeset function) is what we're saving to the database.
